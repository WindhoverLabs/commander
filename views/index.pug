html(lang='en-us')
  head
    meta(charset='utf-8')
    meta(http-equiv="X-UA-Compatible" content="IE=edge,chrome=1")
    meta(name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0")

    title Commander
    script(type="text/javascript" src="/scripts/popper.js/dist/umd/popper.min.js")
    script(type="text/javascript" src="/scripts/jquery/dist/jquery.js")
    script(type="text/javascript" src="/scripts/bootstrap/dist/js/bootstrap.min.js")
    script(type="text/javascript" src="/scripts/patternfly-bootstrap-treeview/dist/bootstrap-treeview.min.js")
    script(type="text/javascript" src="/scripts/svg.js/dist/svg.js")
    script(type="text/javascript" src="/js/crew-display.js")
    script(type="text/javascript" src='/scripts/wolfy87-eventemitter/EventEmitter.js')
    script(type="text/javascript" src='/scripts/socket.io-client/dist/socket.io.js')
    script(type="text/javascript" src='/trickcomm.js/client.js')
    script.
      /* var session = new TrickComm();

      console.log('Waiting to connect');
      session.on('connect', function() {
          console.log('Connected');
      }); */
    
    link(rel="stylesheet" type="text/css" href="/scripts/bootstrap/dist/css/bootstrap.min.css")
    link(rel="stylesheet" type="text/css" href="/css/commander.css")
    link(rel="stylesheet" type="text/css" href="/scripts/font-awesome/css/font-awesome.min.css")
    
    script(type="text/javascript" src="//golden-layout.com/files/latest/js/goldenlayout.min.js")
    link(type="text/css" rel="stylesheet" href="//golden-layout.com/files/latest/css/goldenlayout-base.css")
    link(type="text/css" rel="stylesheet" href="//golden-layout.com/files/latest/css/goldenlayout-dark-theme.css")

    <!--Jqtree is a Jquery widget for displaying tree structures  -->
    script(type="text/javascript" src="/scripts/jqtree/tree.jquery.js")
    link(type="text/css" rel="stylesheet" href="/scripts/jqtree/jqtree.css")
    

  body
    div#genericInputModal.modal.fade(tabindex="-1" role="dialog" aria-labelledby="genericInputModal" aria-hidden="true")
      div.modal-dialog(role="document")
        div.modal-content
          div.modal-header
            h5.modal-title#modalTitle Title Placeholder
            button(type="button" class="close" data-dismiss="modal" aria-label="Close" style="color:white")
              span(aria-hidden="true") &times;
          div.modal-body
            form#modalForm
          div.modal-footer
            button#modalSubmit.btn.btn-outline-primary(type="submit" data-dismiss="modal") OK
            button.btn.btn-outline-secondary(type="button" data-dismiss="modal") Close    
    nav.navbar.fixed-top.navbar-expand-lg.navbar-dark.bg-dark(style="max-height:40px;box-shadow: 0px -23px 80px #fff;")
      a.navbar-brand(href="#")
        img(src="/img/Windhover-Mark-White.png" width="30" style="margin:8px" class="d-inline-block align-top" alt="")
        | Commander
      #navbarSupportedContent.collapse.navbar-collapse
        ul.navbar-nav.mr-auto
          li.nav-item.dropdown
            a.nav-link.dropdown-toggle(href="#", role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false") Default Instance
            div.dropdown-menu(aria-labelledby="instanceDropdown")
              a.dropdown-item(href="#") TYPHOON_480H/SITL
              a.dropdown-item(href="#") OCPOC/DEFAULT
              a.dropdown-item(href="#") BEBOP2/SITL
              a.dropdown-item(href="#") BEBOP2/DEFAULT
        ul.wh-nav-btn(data-toggle="tooltip" data-placement="bottom" title="Load page layout")
            button.btn.btn-outline-primary( data-toggle="modal" data-target="#genericInputModal" data-title="Load Layout" data-submit="LoadLayout" data-custom='[{"label":"Load Layout", "type":"dropdown", "getItem":"GetStoredLayoutList"}]') 
              i.fa.fa-cubes
        ul.wh-nav-btn(data-toggle="tooltip" data-placement="bottom" title="Save page layout")
            button.btn.btn-outline-primary(data-toggle="modal" data-target="#genericInputModal" data-title="Save Layout" data-submit="SaveLayout" data-custom='[{"label":"Save Layout", "type":"field" }]') 
              i.fa.fa-save 
    .ui.main.text.container
      #wrapper
        div#menuWrapper
          button#menuToggle.btn.btn-primary.btn-circle
            i#menuIcon.fa.fa-arrow-right
          div#menuContainer
        #layoutContainer
        #main-content
      script(type="text/javascript" src='/js/util.js')  
      script.

        /* Inital config of layout */
        var config = {
          settings: {
            selectionEnabled: true
          },
          content: [{
            type: 'row',
            content: [{
              type:'component',
              componentName: 'example',
              componentState: { text: 'Component 1'}
            },
            {
              type:'component',
              componentName: 'example',
              componentState: { text: 'Component 2'}
            }]
          }]
        };
        /* Create Layout */
        var myLayout = new window.GoldenLayout( config, $('#layoutContainer'));

        function InitLayout(mlyt){
          /* Register Component in layout */
          mlyt.registerComponent( 'example', function( container, state ){

            if( state.link ) {
              container.getElement().load( "/"+state.link);
            }
            else{
              container.getElement().html( '<h2>Unable to retrieve previous state.</h2>' );
            }
            
            $(window).on("LayoutSaved",() => {
              container.extendState({
                  link: container._config.componentState.link
                });
              });
          });
          /* Initalize layout */
          mlyt.init();
          /* This event is fired when a component is created, which renders selected page onto created component */
          mlyt.on("itemCreated", (item) => {
            
            if(item.type=="component")
            {
              if(item.hasOwnProperty("config"))
              {
                var link = undefined;
                var id = undefined;
                if(item.config.hasOwnProperty("id"))
                {
                  id = item.config.id;
                }
                if(item.config.hasOwnProperty("componentState"))
                {
                  if(item.config.componentState.hasOwnProperty("link"))
                  {
                    link = item.config.componentState.link;
                  }
                }
                if(id!=undefined && link!=undefined)
                {
                  item.container._contentElement.load("/"+link);
                  item.container._contentElement.css("overflow","auto");
                }
              }
            }
          });
          /* Making file items in our tree dragable */
          $('#menuContainer').tree(
            'getNodeByCallback',
            function(node) {
                if (node.type =="file") {
                    // Node is found; return true
                    var newItemConfig = {
                      id: node.name,
                      title: node.name,
                      type: 'component',
                      componentName: 'example',
                      componentState: { text: "text" , link: node.path}
                    };
                    
                    myLayout.createDragSource( node.element, newItemConfig );
                    console.log(node.element);
                    /* node.element.on("click", () => {
                      console.log(node.element);
                    }); */
                    node.element.click(function(){
                      console.log(node.element);
                      /* if( myLayout.selectedItem === null ) {
                        alert( 'No item selected' );
                      } else {
                        myLayout.selectedItem.addChild( newItemConfig );          
                      } */
                    });
                    
                    return true;
                }
                else {
                    // Node not found; continue searching
                    return false;
                }
            }
          );
          /* Making file items in our tree respond to click 
          with shortcut page load */
          $('#menuContainer').on(
              'tree.click',
              function(e){
                if(e.node.type=="file"){
                  var element = e.node.element;
                  var newItemConfig = {
                    id: e.node.name,
                    title: e.node.name,
                    type: 'component',
                    componentName: 'example',
                    componentState: { text: "text" , link: e.node.path}
                  };
                  if( myLayout.selectedItem === null ) {
                    alert( 'No item selected' );
                  } else {
                    myLayout.selectedItem.addChild( newItemConfig );          
                  }
                }
              }
          );
        }

        /* Initialize data */
        InitLayout(myLayout);
          
        $("#genericInputModal").on('show.bs.modal',(e) => {
            let btn = $(e.relatedTarget);
            console.log(btn)
            let title = btn.data('title');
            let submit = btn.data('submit');
            let custom = btn.data('custom');
            let item = "";
            let inputsIds = []
            /* set title */
            $('#modalTitle').text(title);
             
            /* set custom data */
            for(let e in custom){
              switch(custom[e].type){
                case "field":
                  item = "<div class='form-group'>"
                  +"<label class='col-form-label' id=labelField"+e+" for=inputField"+e+">"+custom[e].label+"</label>"
                  +"<input class='form-control' type='text' id=inputField"+e+">"
                  +"</div>"
                  inputsIds.push("inputField"+e)
                  $('#modalForm').append(item);
                  break;
                case "dropdown":
                  item = "<div class='form-group'>"
                  +"<label class='col-form-label' id=labelField"+e+" for=inputField"+e+">"+custom[e].label+"</label>"
                  +"<select class='custom-select mr-sm-2'id=select"+e+">"
                  +"<option selected>Choose..</option>"
                  +"</select>"
                  +"</div>"
                  $('#modalForm').append(item)
                  inputsIds.push("select"+e)
                  var options = window[custom[e].getItem].call()
                  console.log(options);
                  for(let i in options){
                    let html = "<option value="+i+">"+options[i]+"</option>"
                    $('#select'+e).append(html)
                  }
                  break;
                default:
                  console.log("Unknown data passed as attribute");
              }
            }
            
            /* set submit action */
            $('#modalSubmit')[0].onclick = window[submit];

        });
        
        $("#genericInputModal").on('hidden.bs.modal',(e) => {
            /* replace title */
            $("#modalTitle").text('Title Placeholder');
            /* Remove all attached children*/
            $("#modalForm").empty();
            /* Unset submit action */
            $('#modalSubmit')[0].onclick = null;
        });
        
        function SaveLayout() {
          /* now save the state */
          let form = $("[id='inputField0']");
          let name = "LAYOUT_"
          if(form.val() != "")
          {
            name += form.val()+"_"
          }  
          /* add timestamp */
          name += Date.now();  
          /* stringify state config */
          let state = JSON.stringify( myLayout.toConfig() );
          localStorage.setItem( name, state );
          console.log(name + " stored")
        }
        
        function LoadLayout(){
          /* if a layout exists, destroy it */
          myLayout.destroy()
          /* retrieve and load saved layout */
          let formVal = $("[id='select0']").val();
          let key = GetStoredLayoutList()[formVal];
          var savedState = localStorage.getItem( key );
          if( savedState !== null ) {
            myLayout = new window.GoldenLayout( JSON.parse( savedState ), $('#layoutContainer') );
            InitLayout(myLayout);
          }
          else{
            console.log("Layout cannot be loaded.")
          }
        }
        
        
        
        
        var menuOpen = false;
        $("#menuToggle").click(()=>{
          if(!menuOpen){
            $("#menuToggle").animate({left: "9%"});
            $("#menuContainer").animate({left: "0%"});  
            $("#menuIcon").removeClass("rotate-left-right");
            $("#menuIcon").addClass("rotate-right-left");
            menuOpen = true;
          }
          else{
            $("#menuToggle").animate({left: "-8px"});
            $("#menuContainer").animate({left: "-10%"});
            $("#menuIcon").addClass("rotate-left-right");
            $("#menuIcon").removeClass("rotate-right-left");
            menuOpen = false;
          }

        });
 
        $(function () {
          $('[data-toggle="tooltip"]').tooltip()
        })
        $(window).resize(() => {
            console.log("resize-event");
            myLayout.updateSize();
        })    
    nav.navbar.fixed-bottom.navbar-expand-lg.navbar-dark.bg-dark(style="max-height:10px;box-shadow: 0px -1px 2px #fff;")    
