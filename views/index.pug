html(lang='en-us')
  head
    meta(charset='utf-8')
    meta(http-equiv="X-UA-Compatible" content="IE=edge,chrome=1")
    meta(name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0")

    title Commander
    <!--Semantic libraries not needed-->
    link(rel="stylesheet" type="text/css" href="/scripts/semantic-ui/dist/components/reset.css")
    link(rel="stylesheet" type="text/css" href="/scripts/semantic-ui/dist/components/site.css")

    link(rel="stylesheet" type="text/css" href="/scripts/semantic-ui/dist/components/container.css")
    link(rel="stylesheet" type="text/css" href="/scripts/semantic-ui/dist/components/grid.css")
    link(rel="stylesheet" type="text/css" href="/scripts/semantic-ui/dist/components/header.css")
    link(rel="stylesheet" type="text/css" href="/scripts/semantic-ui/dist/components/image.css")
    link(rel="stylesheet" type="text/css" href="/scripts/semantic-ui/dist/components/menu.css")

    link(rel="stylesheet" type="text/css" href="/scripts/semantic-ui/dist/components/divider.css")
    link(rel="stylesheet" type="text/css" href="/scripts/semantic-ui/dist/components/list.css")
    link(rel="stylesheet" type="text/css" href="/scripts/semantic-ui/dist/components/segment.css")
    link(rel="stylesheet" type="text/css" href="/scripts/semantic-ui/dist/components/dropdown.css")
    link(rel="stylesheet" type="text/css" href="/scripts/semantic-ui/dist/components/icon.css")

    link(rel="stylesheet" type="text/css" href="/css/commander.css")
    
    script(type="text/javascript" src="//code.jquery.com/jquery-1.11.1.min.js")
    script(type="text/javascript" src="//golden-layout.com/files/latest/js/goldenlayout.min.js")
    link(type="text/css" rel="stylesheet" href="//golden-layout.com/files/latest/css/goldenlayout-base.css")
    link(type="text/css" rel="stylesheet" href="//golden-layout.com/files/latest/css/goldenlayout-dark-theme.css")
    <!--Jqtree is a Jquery widget for displaying tree structures  -->
    script(type="text/javascript" src="/scripts/jqtree/tree.jquery.js")
    link(type="text/css" rel="stylesheet" href="/scripts/jqtree/jqtree.css")
    

  body
    .ui.fixed.inverted.menu
      #top-menu-bar.ui.container
        a.header.item(href="#")
          img#logo(src='/img/Windhover-Mark-White.png')
          | Commander

        div.ui.simple.dropdown.item
          | Views
          i.dropdown.icon
          div.menu
            a.item(href="#") Heads Up Display
            a.item(href="#") Mission Planner
            div.item
              i.dropdown.icon
              | User Created
              div.menu
                a.item(href="#") Karthik's
                a.item(href="#") Matt's


        div.ui.simple.dropdown.item
          | Widgets 
          i.dropdown.icon
          div.menu
            div.item Widget 1
            div.item Widget 2
            div.item Widget 3
            div.item
              i.dropdown.icon
              | Core Services
              div.menu
                div.item Widget 1
                div.item Widget 2
                div.item Widget 3
                div.item Widget 4
                div.item Widget 5
            div.item
              i.dropdown.icon
              | Applications
              div.menu
                div.item Actuator Motor Control
                div.item Battery
                div.item Checksum
                div.item Position Estimator
                div.item
                  i.dropdown.icon
                  | Applications
                  div.menu
                    div.item Widget 1
                    div.item Widget 2
                    
    .ui.main.text.container
      #wrapper
        div#menuContainer
        #layoutContainer
        #main-content

      script.
        /* Workspace folders and files should be stored like the following structure */
        var dirData = [
          {
            name: "Test 1",
            type: "folder",
            children: [
              { name : "General", type: "file", path: "testpage1"},
              { name : "HK", type: "file", path: "testpage2"}
            ]
          },
          {
            name: "Test 2",
            type: "folder",
            children: [
              { name : "General", type: "file", path: "testpage1"},
              { name : "HK", type: "file", path: "testpage2"}
            ]
          }
        ];
        /* Inital config of layout */
        var config = {
          settings: {
            selectionEnabled: true
          },
          content: [{
            type: 'row',
            content: [{
              type:'component',
              componentName: 'example',
              componentState: { text: 'Component 1' }
            },
            {
              type:'component',
              componentName: 'example',
              componentState: { text: 'Component 2' }
            }]
          }]
        };
        /* Create Layout */
        var myLayout;
        var savedState = localStorage.getItem( 'savedState' );

        if( savedState !== null ) {
          myLayout = new window.GoldenLayout( JSON.parse( savedState ), $('#layoutContainer') );
          console.log("Loading from saved state!")
        } else {
          myLayout = new window.GoldenLayout( config, $('#layoutContainer'));
          console.log("No saved state!")
        }
        /* var myLayout = new window.GoldenLayout( config, $('#layoutContainer')); */
        /* Register Component in layout */
        myLayout.registerComponent( 'example', function( container, state ){
          container.getElement().html( '<h2>' + state.text + '</h2>' );
        });
        myLayout.init();
        /* This event is fired when a component is created, which renders selected page onto created component */
        myLayout.on("itemCreated", (item) => {
          
          if(item.type=="component")
          {
            if(item.hasOwnProperty("config"))
            {
              var link = undefined;
              var id = undefined;
              if(item.config.hasOwnProperty("id"))
              {
                id = item.config.id;
              }
              if(item.config.hasOwnProperty("componentState"))
              {
                if(item.config.componentState.hasOwnProperty("link"))
                {
                  link = item.config.componentState.link;
                }
              }
              if(id!=undefined && link!=undefined)
              {
                item.container._contentElement.load("/"+link);
                item.container._contentElement.css("overflow","auto");
              }
            }
          }
        });
        /* Initialize jqtree widget */         
        $('#menuContainer').tree({
          data:dirData,
        });
        /* Making file items in our tree dragable */
        $('#menuContainer').tree(
          'getNodeByCallback',
          function(node) {
              if (node.type =="file") {
                  // Node is found; return true
                  var newItemConfig = {
                    id: node.name,
                    title: node.name,
                    type: 'component',
                    componentName: 'example',
                    componentState: { text: "text" , link: node.path}
                  };
                  
                  myLayout.createDragSource( node.element, newItemConfig );
                  console.log(node.element);
                  /* node.element.on("click", () => {
                    console.log(node.element);
                  }); */
                  node.element.click(function(){
                    console.log(node.element);
                    /* if( myLayout.selectedItem === null ) {
                      alert( 'No item selected' );
                    } else {
                      myLayout.selectedItem.addChild( newItemConfig );          
                    } */
                  });
                  
                  return true;
              }
              else {
                  // Node not found; continue searching
                  return false;
              }
          }
        );
        /* Making file items in our tree respond to click 
        with shortcut page load */
        $('#menuContainer').on(
            'tree.click',
            function(e){
              if(e.node.type=="file"){
                var element = e.node.element;
                var newItemConfig = {
                  id: e.node.name,
                  title: e.node.name,
                  type: 'component',
                  componentName: 'example',
                  componentState: { text: "text" , link: e.node.path}
                };
                if( myLayout.selectedItem === null ) {
                  alert( 'No item selected' );
                } else {
                  myLayout.selectedItem.addChild( newItemConfig );          
                }
              }
            }
        );
        /* Save state on stateChanged event */
        myLayout.on( 'stateChanged', () => {
          //now save the state
          var state = JSON.stringify( myLayout.toConfig() );
          localStorage.setItem( 'savedState', state );
          console.log("State changes saved!")
        });
        

    div.ui.inverted.vertical.footer.segment
      div.ui.center.aligned.container
        img.ui.centered.mini.image(src="/img/Windhover-Mark-White.png")
        | Windhover Labs
        div.ui.inverted.section.divider
