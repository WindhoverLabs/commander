#!/usr/bin/env node

/**
 * Module dependencies.
 */

var browserSync = require( 'browser-sync' );
var app = require( '../app' );
var debug = require( 'debug' )( 'commander:server' );
var http = require( 'http' );

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort( process.env.PORT || '3000' );
app.set( 'port', port );

const isProduction = 'production' === process.env.NODE_ENV;
app.set( 'etag', isProduction );

/**
 * Create HTTP server.
 */

var server = http.createServer( app );

/**
 * Socket.io
 */

var io = app.io
io.attach( server );

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen( port );
server.on( 'error', onError );
server.on( 'listening', onListening );

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort( val ) {
  var port = parseInt( val, 10 );

  if ( isNaN( port ) ) {
    // named pipe
    return val;
  }

  if ( port >= 0 ) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError( error ) {
  if ( error.syscall !== 'listen' ) {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch ( error.code ) {
    case 'EACCES':
      console.error( bind + ' requires elevated privileges' );
      process.exit( 1 );
      break;
    case 'EADDRINUSE':
      console.error( bind + ' is already in use' );
      process.exit( 1 );
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug( 'Listening on ' + bind );

  if ( !isProduction ) {
    // https://ponyfoo.com/articles/a-browsersync-primer#inside-a-node-application
    browserSync( {
      files: [
        'app.js',
        'package.json',
        'public/**/*',
        'routes/**/*',
        'views/**/*'
      ],
      online: false,
      open: false,
      port: port + 1,
      proxy: 'localhost:' + port,
      ui: false
    } );
  }
}

/**
 * Test  Native code
 */

var cf = require( '../build/Debug/addon' );



console.log( '************************************************' );
console.log( '*************** NODEJS ADDON *******************' );
console.log( '************************************************' );

CF_CONFIG = {
		"DEFAULT_TEMP_BASE_DIR":"/tmp/cf/",
};


cf.SetMibParams("ACK_TIMEOUT","10");
cf.SetMibParams("ACK_LIMIT","2");
cf.SetMibParams("NAK_TIMEOUT","5");
cf.SetMibParams("NAK_LIMIT","3");
cf.SetMibParams("INACTIVITY_TIMEOUT","20");
cf.SetMibParams("OUTGOING_FILE_CHUNK_SIZE","64");
cf.SetMibParams("SAVE_INCOMPLETE_FILES","no");
cf.SetMibParams("MY_ID","0.23");

cf.SetConfig(CF_CONFIG);

cf.RegisterCallbackOn( 'info', ( value ) => {
  console.log( "INFO: ", value );
} );

cf.RegisterCallbackOn( 'debug', ( value ) => {
  console.log( "DEBUG: ", value );
} );

cf.RegisterCallbackOn( 'error', ( value ) => {
  console.log( "ERR: ", value );
} );

cf.RegisterCallbackOn( 'warning', ( value ) => {
  console.log( "WARN: ", value );
} );

cf.RegisterCallbackOn( 'pduOutputOpen', ( value ) => {
	  console.log( "########",value );
} );

cf.RegisterCallbackOn( 'pduOutputReady', ( value ) => {
	console.log( "$$$$$$",value );
} );

cf.RegisterCallbackOn( 'pduOutputSend', ( buffer ) => {
	st = "[";
	for(var i  =0 ; i<buffer.length;i++){
		if(i != buffer.length -1){
			st += "0x"+buffer[i].toString(16) + ", ";
		}
		else{
			st += "0x"+buffer[i].toString(16) ;
		}
		
		
	}
	st += "]"
	console.log(st);
} );


cf.RegisterCallbackOn( 'showTransactionStatus', ( value ) => {
//	  console.log(value );
} );

cf.RegisterCallbackOn( 'indication', ( value ) => {
//	  console.log(value);
} );


cf.AppInit();





var test_1 = new Buffer([0x04, 0x00, 0x31, 0x13, 0x00, 0x18, 0x00, 0x00, 0x00, 0x01, 0x00, 0x17, 0x07, 0x80, 0x00, 0x00, 0x00, 0x0d, 0x16, 0x2f, 0x63, 0x66, 0x2f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x2f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x74, 0x78, 0x74, 0x13, 0x63, 0x66, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x74, 0x78, 0x74]);
var test_2 = new Buffer([0x14, 0x00, 0x11, 0x13, 0x00, 0x18, 0x00, 0x00, 0x00, 0x01, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x21, 0x0a]);
var test_3 = new Buffer([0x04, 0x00, 0x0a, 0x13, 0x00, 0x18, 0x00, 0x00, 0x00, 0x01, 0x00, 0x17, 0x04, 0x00, 0x33, 0xf2, 0x47, 0xfc, 0x00, 0x00, 0x00, 0x0d]);

//var test_1 = new Buffer([0x4, 0x0, 0x25, 0x13, 0x0, 0x17, 0x0, 0x0, 0x0, 0x1, 0x0, 0x16, 0x7, 0x80, 0x0, 0x0, 0x0, 0xd, 0x13, 0x63, 0x66, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x74, 0x78, 0x74, 0xa, 0x63, 0x66, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2f]);
//var test_2 = new Buffer([0x14, 0x0, 0x11, 0x13, 0x0, 0x17, 0x0, 0x0, 0x0, 0x1, 0x0, 0x16, 0x0, 0x0, 0x0, 0x0, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x21, 0xa]);
//var test_3 = new Buffer([0x4, 0x0, 0xa, 0x13, 0x0, 0x17, 0x0, 0x0, 0x0, 0x1, 0x0, 0x16, 0x4, 0x0, 0xba, 0xd1, 0xd0, 0x8d, 0x0, 0x0, 0x0, 0xd]);

//cf.GivePdu(test_1,test_1.length);
//cf.GivePdu(test_2,test_2.length);
//cf.GivePdu(test_3,test_3.length);





cf.StartCycle();

cf.GivePdu(test_1,test_1.length);
cf.GivePdu(test_2,test_2.length);
cf.GivePdu(test_3,test_3.length);

//setTimeout(()=>{
//console.log()
//console.log()
//console.log()
//console.log()
//console.log()
//cf.RequestPdu(1,"0.22","/tmp/src/hello.txt","cftesting/");
//
//},5000);





//console.log(cf.GetSummaryStatus());

//console.log(cf.GetIdFromString("0.29"));

//cf.GetTransactionStatus(1,2,new Buffer([0,23]));

//console.log("**************",cf.GetMibParams("NAK_TIMEOUT"));
//console.log("**************",cf.GetMibParams("NAK_LIMIT"));

setTimeout(()=>{
	cf.StopCycle();
},50000);


console.log( '************************************************' );
console.log( '************************************************' );